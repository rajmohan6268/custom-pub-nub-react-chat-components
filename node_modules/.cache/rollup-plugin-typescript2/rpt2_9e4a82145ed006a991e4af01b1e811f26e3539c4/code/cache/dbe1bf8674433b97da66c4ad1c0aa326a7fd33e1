{"code":"import React from \"react\";\r\nimport { useAtom } from \"jotai\";\r\nimport { ThemeAtom, CurrentChannelAtom } from \"../state-atoms\";\r\nimport \"./channel-list.scss\";\r\n/**\r\n * Renders an interactive list of channels.\r\n *\r\n * It can represent all channels of the application, only\r\n * channels joined by the current user, all channels available to be joined, or whatever else is\r\n * passed into it. A common pattern in chat applications is to render two instances of the\r\n * component - one visible all the time to show joined channels, and another one hidden inside a\r\n * modal with channels available to join. Make sure to handle the onChannelSwitched event to switch\r\n * the current channel passed to the Chat provider.\r\n */\r\nexport var ChannelList = function (props) {\r\n    var currentChannel = useAtom(CurrentChannelAtom)[0];\r\n    var theme = useAtom(ThemeAtom)[0];\r\n    /*\r\n    /* Helper functions\r\n    */\r\n    var isChannelActive = function (ch) {\r\n        return currentChannel === ch.id;\r\n    };\r\n    var channelSorter = function (a, b) {\r\n        var _a;\r\n        if (props.sort)\r\n            return props.sort(a, b);\r\n        return (_a = a === null || a === void 0 ? void 0 : a.name) === null || _a === void 0 ? void 0 : _a.localeCompare(b.name, \"en\", { sensitivity: \"base\" });\r\n    };\r\n    var channelFromString = function (channel) {\r\n        if (typeof channel === \"string\") {\r\n            return {\r\n                id: channel,\r\n                name: channel,\r\n            };\r\n        }\r\n        return channel;\r\n    };\r\n    /*\r\n    /* Commands\r\n    */\r\n    var switchChannel = function (channel) {\r\n        if (props.onChannelSwitched)\r\n            props.onChannelSwitched(channel);\r\n    };\r\n    /*\r\n    /* Renderers\r\n    */\r\n    var renderChannel = function (channel) {\r\n        var _a, _b;\r\n        if (props.channelRenderer)\r\n            return props.channelRenderer(channel);\r\n        var channelActive = isChannelActive(channel);\r\n        var activeClass = channelActive ? \"pn-channel--active\" : \"\";\r\n        return (React.createElement(\"div\", { key: channel.id, className: \"pn-channel \".concat(activeClass), onClick: function () { return switchChannel(channel); } },\r\n            ((_a = channel.custom) === null || _a === void 0 ? void 0 : _a.profileUrl) && (React.createElement(\"img\", { className: \"pn-channel__thumb\", src: (_b = channel.custom) === null || _b === void 0 ? void 0 : _b.profileUrl, alt: \"Channel thumb\" })),\r\n            React.createElement(\"div\", { className: \"pn-channel__title\" },\r\n                React.createElement(\"p\", { className: \"pn-channel__name\" }, channel.name || channel.id),\r\n                channel.description && React.createElement(\"p\", { className: \"pn-channel__description\" }, channel.description)),\r\n            React.createElement(\"div\", { className: \"pn-channel__actions\" }, props.extraActionsRenderer && props.extraActionsRenderer(channel))));\r\n    };\r\n    return (React.createElement(\"div\", { className: \"pn-channel-list pn-channel-list--\".concat(theme) },\r\n        props.channels.map(channelFromString).sort(channelSorter).map(renderChannel),\r\n        React.createElement(React.Fragment, null, props.children)));\r\n};\r\n//# sourceMappingURL=channel-list.js.map","references":["/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/@types/react/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/jotai/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/src/types.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/src/state-atoms.ts"],"map":"{\"version\":3,\"file\":\"channel-list.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/channel-list/channel-list.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,KAAwB,MAAM,OAAO,CAAC;AAC7C,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAEhC,OAAO,EAAE,SAAS,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AAC/D,OAAO,qBAAqB,CAAC;AAgB7B;;;;;;;;;GASG;AACH,MAAM,CAAC,IAAM,WAAW,GAAyB,UAAC,KAAuB;IAChE,IAAA,cAAc,GAAI,OAAO,CAAC,kBAAkB,CAAC,GAA/B,CAAgC;IAC9C,IAAA,KAAK,GAAI,OAAO,CAAC,SAAS,CAAC,GAAtB,CAAuB;IAEnC;;MAEE;IACF,IAAM,eAAe,GAAG,UAAC,EAAiB;QACxC,OAAO,cAAc,KAAK,EAAE,CAAC,EAAE,CAAC;IAClC,CAAC,CAAC;IAEF,IAAM,aAAa,GAAG,UAAC,CAAgB,EAAE,CAAgB;;QACvD,IAAI,KAAK,CAAC,IAAI;YAAE,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACxC,OAAO,MAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,IAAI,0CAAE,aAAa,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;IACvE,CAAC,CAAC;IAEF,IAAM,iBAAiB,GAAG,UAAC,OAA+B;QACxD,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,OAAO;gBACL,EAAE,EAAE,OAAO;gBACX,IAAI,EAAE,OAAO;aACd,CAAC;SACH;QACD,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;IAEF;;MAEE;IAEF,IAAM,aAAa,GAAG,UAAC,OAAsB;QAC3C,IAAI,KAAK,CAAC,iBAAiB;YAAE,KAAK,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAChE,CAAC,CAAC;IAEF;;MAEE;IAEF,IAAM,aAAa,GAAG,UAAC,OAAsB;;QAC3C,IAAI,KAAK,CAAC,eAAe;YAAE,OAAO,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACjE,IAAM,aAAa,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;QAC/C,IAAM,WAAW,GAAG,aAAa,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC;QAE9D,OAAO,CACL,6BACE,GAAG,EAAE,OAAO,CAAC,EAAE,EACf,SAAS,EAAE,qBAAc,WAAW,CAAE,EACtC,OAAO,EAAE,cAAM,OAAA,aAAa,CAAC,OAAO,CAAC,EAAtB,CAAsB;YAEpC,CAAA,MAAA,OAAO,CAAC,MAAM,0CAAE,UAAU,KAAI,CAC7B,6BACE,SAAS,EAAC,mBAAmB,EAC7B,GAAG,EAAE,MAAA,OAAO,CAAC,MAAM,0CAAE,UAAoB,EACzC,GAAG,EAAC,eAAe,GACnB,CACH;YACD,6BAAK,SAAS,EAAC,mBAAmB;gBAChC,2BAAG,SAAS,EAAC,kBAAkB,IAAE,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,EAAE,CAAK;gBAC/D,OAAO,CAAC,WAAW,IAAI,2BAAG,SAAS,EAAC,yBAAyB,IAAE,OAAO,CAAC,WAAW,CAAK,CACpF;YACN,6BAAK,SAAS,EAAC,qBAAqB,IACjC,KAAK,CAAC,oBAAoB,IAAI,KAAK,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAC9D,CACF,CACP,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAE,2CAAoC,KAAK,CAAE;QACvD,KAAK,CAAC,QAAqB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC;QAC3F,0CAAG,KAAK,CAAC,QAAQ,CAAI,CACjB,CACP,CAAC;AACJ,CAAC,CAAC\"}","dts":{"name":"/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/node_modules/.cache/rollup-plugin-typescript2/placeholder/channel-list/channel-list.d.ts","writeByteOrderMark":false,"text":"import { FC, ReactNode } from \"react\";\r\nimport { ChannelEntity } from \"../types\";\r\nimport \"./channel-list.scss\";\r\nexport interface ChannelListProps {\r\n    children?: ReactNode;\r\n    /** Option to pass a list of channels, including metadata, to render on the list. */\r\n    channels: ChannelEntity[] | string[];\r\n    /** Channels are sorted alphabetically by default, you can override that by providing a sorter function */\r\n    sort?: (a: ChannelEntity, b: ChannelEntity) => -1 | 0 | 1;\r\n    /** Option to provide an extra actions renderer to add custom action buttons to each channel. */\r\n    extraActionsRenderer?: (channel: ChannelEntity) => JSX.Element;\r\n    /** Option to provide a custom channel renderer to override default themes and CSS variables. */\r\n    channelRenderer?: (channel: ChannelEntity) => JSX.Element;\r\n    /** Callback run when a user clicked one of the channels. Can be used to switch the current channel. */\r\n    onChannelSwitched?: (channel: ChannelEntity) => unknown;\r\n}\r\n/**\r\n * Renders an interactive list of channels.\r\n *\r\n * It can represent all channels of the application, only\r\n * channels joined by the current user, all channels available to be joined, or whatever else is\r\n * passed into it. A common pattern in chat applications is to render two instances of the\r\n * component - one visible all the time to show joined channels, and another one hidden inside a\r\n * modal with channels available to join. Make sure to handle the onChannelSwitched event to switch\r\n * the current channel passed to the Chat provider.\r\n */\r\nexport declare const ChannelList: FC<ChannelListProps>;\r\n"}}
