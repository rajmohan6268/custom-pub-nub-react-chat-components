{"code":"import React from \"react\";\r\nimport { usePubNub } from \"pubnub-react\";\r\nimport { useAtom } from \"jotai\";\r\nimport { ThemeAtom } from \"../state-atoms\";\r\nimport { getNameInitials, getPredefinedColor } from \"../helpers\";\r\nimport \"./member-list.scss\";\r\n/**\r\n * Renders a list of members.\r\n *\r\n * It can represent all users of the application, only members of\r\n * the current channel, users currently subscribed/present on the channel, or whatever else is passed\r\n * into it. Custom memberRenderer can be used to modify how the users are rendered. For example\r\n * you can add presence indicators.\r\n */\r\nexport var MemberList = function (props) {\r\n    var pubnub = usePubNub();\r\n    var theme = useAtom(ThemeAtom)[0];\r\n    /*\r\n    /* Helper functions\r\n    */\r\n    var isOwnMember = function (uuid) {\r\n        return pubnub.getUUID() === uuid;\r\n    };\r\n    var isPresentMember = function (uuid) {\r\n        return props.presentMembers.includes(uuid);\r\n    };\r\n    var memberSorter = function (a, b) {\r\n        if (props.sort)\r\n            return props.sort(a, b);\r\n        if (isOwnMember(a.id))\r\n            return -1;\r\n        if (isOwnMember(b.id))\r\n            return 1;\r\n        if (isPresentMember(a.id) && !isPresentMember(b.id))\r\n            return -1;\r\n        if (isPresentMember(b.id) && !isPresentMember(a.id))\r\n            return 1;\r\n        return a.name.localeCompare(b.name, \"en\", { sensitivity: \"base\" });\r\n    };\r\n    var memberFromString = function (member) {\r\n        if (typeof member === \"string\") {\r\n            return {\r\n                id: member,\r\n                name: member,\r\n            };\r\n        }\r\n        return member;\r\n    };\r\n    /*\r\n    /* Commands\r\n    */\r\n    var clickMember = function (member) {\r\n        if (props.onMemberClicked)\r\n            props.onMemberClicked(member);\r\n    };\r\n    /*\r\n    /* Renderers\r\n    */\r\n    var renderMember = function (member) {\r\n        var _a;\r\n        if (props.memberRenderer)\r\n            return props.memberRenderer(member);\r\n        var youString = isOwnMember(member.id) ? props.selfText : \"\";\r\n        return (React.createElement(\"div\", { key: member.id, className: \"pn-member\", onClick: function () { return clickMember(member); } },\r\n            React.createElement(\"div\", { className: \"pn-member__avatar\", style: { backgroundColor: getPredefinedColor(member.id) } },\r\n                member.profileUrl ? (React.createElement(\"img\", { src: member.profileUrl, alt: \"User avatar\" })) : (getNameInitials(member.name || member.id)),\r\n                isPresentMember(member.id) && React.createElement(\"i\", { className: \"pn-member__presence\" })),\r\n            React.createElement(\"div\", { className: \"pn-member__main\" },\r\n                React.createElement(\"p\", { className: \"pn-member__name\" },\r\n                    member.name,\r\n                    \" \",\r\n                    youString),\r\n                React.createElement(\"p\", { className: \"pn-member__title\" }, (_a = member.custom) === null || _a === void 0 ? void 0 : _a.title)),\r\n            React.createElement(\"div\", { className: \"pn-member__actions\" }, props.extraActionsRenderer && props.extraActionsRenderer(member))));\r\n    };\r\n    return (React.createElement(\"div\", { className: \"pn-member-list pn-member-list--\".concat(theme) },\r\n        props.members.map(memberFromString).sort(memberSorter).map(renderMember),\r\n        React.createElement(React.Fragment, null, props.children)));\r\n};\r\nMemberList.defaultProps = {\r\n    members: [],\r\n    presentMembers: [],\r\n    onMemberClicked: null,\r\n    selfText: \"(You)\",\r\n};\r\n//# sourceMappingURL=member-list.js.map","references":["/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/@types/react/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/pubnub-react/dist/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/jotai/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/src/types.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/src/state-atoms.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/src/helpers.ts"],"map":"{\"version\":3,\"file\":\"member-list.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/member-list/member-list.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/node_modules/.cache/rollup-plugin-typescript2/placeholder/member-list/member-list.d.ts","writeByteOrderMark":false,"text":"import { FC, ReactNode } from \"react\";\r\nimport { UserEntity } from \"../types\";\r\nimport \"./member-list.scss\";\r\nexport interface MemberListProps {\r\n    children?: ReactNode;\r\n    /** Option to pass a list of members, including metadata, to render on the list. */\r\n    members: UserEntity[] | string[];\r\n    /** Option to pass a list of present member IDs to mark them with a presence indicator. */\r\n    presentMembers?: string[];\r\n    /** This text will be added after current user's name */\r\n    selfText?: string;\r\n    /** Members are sorted by presence and alphabetically by default, you can override that by providing a sorter function */\r\n    sort?: (a: UserEntity, b: UserEntity) => -1 | 0 | 1;\r\n    /** Provide extra actions renderer to add custom action buttons to each member */\r\n    extraActionsRenderer?: (member: UserEntity) => JSX.Element;\r\n    /** Option to provide a custom user renderer to override themes and CSS variables. */\r\n    memberRenderer?: (member: UserEntity) => JSX.Element;\r\n    /** A callback run when user clicked one of the members. */\r\n    onMemberClicked?: (member: UserEntity) => unknown;\r\n}\r\n/**\r\n * Renders a list of members.\r\n *\r\n * It can represent all users of the application, only members of\r\n * the current channel, users currently subscribed/present on the channel, or whatever else is passed\r\n * into it. Custom memberRenderer can be used to modify how the users are rendered. For example\r\n * you can add presence indicators.\r\n */\r\nexport declare const MemberList: FC<MemberListProps>;\r\n"}}
