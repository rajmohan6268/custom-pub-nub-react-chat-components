{"code":"export function isFilePayload(message) {\r\n    return message.file !== undefined;\r\n}\r\n//# sourceMappingURL=types.js.map","references":["/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/@types/pubnub/index.d.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/types.ts\"],\"names\":[],\"mappings\":\"AA+CA,MAAM,UAAU,aAAa,CAAC,OAAqC;IACjE,OAAQ,OAAuB,CAAC,IAAI,KAAK,SAAS,CAAC;AACrD,CAAC\"}","dts":{"name":"/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/node_modules/.cache/rollup-plugin-typescript2/placeholder/types.d.ts","writeByteOrderMark":false,"text":"import { UUIDMetadataObject, ChannelMetadataObject, ObjectCustom } from \"pubnub\";\r\nexport declare type Themes = \"light\" | \"dark\" | \"support\" | \"support-dark\" | \"event\" | \"event-dark\";\r\nexport interface EmojiPickerElementProps {\r\n    onSelect?: ({ native: string }: {\r\n        native: any;\r\n    }) => void;\r\n}\r\nexport declare type ChannelEntity = ChannelMetadataObject<ObjectCustom>;\r\nexport declare type UserEntity = UUIDMetadataObject<ObjectCustom>;\r\nexport interface MessageEnvelope {\r\n    channel?: string;\r\n    message: MessagePayload | FilePayload;\r\n    timetoken: string | number;\r\n    messageType?: string | number;\r\n    publisher?: string;\r\n    uuid?: string;\r\n    meta?: {\r\n        [key: string]: unknown;\r\n    };\r\n    actions?: {\r\n        [type: string]: {\r\n            [value: string]: Array<{\r\n                uuid: string;\r\n                actionTimetoken: string | number;\r\n            }>;\r\n        };\r\n    };\r\n}\r\nexport interface MessagePayload {\r\n    id: string;\r\n    type?: string;\r\n    text?: string;\r\n    sender?: UUIDMetadataObject<ObjectCustom>;\r\n    attachments?: Array<ImageAttachment | LinkAttachment>;\r\n    createdAt?: string;\r\n    [key: string]: unknown;\r\n}\r\nexport interface FilePayload {\r\n    message?: MessagePayload;\r\n    file: FileAttachment;\r\n}\r\nexport declare function isFilePayload(message: MessagePayload | FilePayload): message is FilePayload;\r\nexport interface FileAttachment {\r\n    id: string;\r\n    name: string;\r\n    url?: string;\r\n}\r\nexport interface ImageAttachment {\r\n    type: \"image\";\r\n    image: {\r\n        source: string;\r\n    };\r\n}\r\nexport interface LinkAttachment {\r\n    type: \"link\";\r\n    description?: string;\r\n    title?: string;\r\n    icon?: {\r\n        source: string;\r\n    };\r\n    image: {\r\n        source: string;\r\n    };\r\n    provider?: {\r\n        name: string;\r\n        url: string;\r\n    };\r\n}\r\nexport interface RetryOptions {\r\n    maxRetries: number;\r\n    timeout: number;\r\n    exponentialFactor: number;\r\n}\r\n"}}
