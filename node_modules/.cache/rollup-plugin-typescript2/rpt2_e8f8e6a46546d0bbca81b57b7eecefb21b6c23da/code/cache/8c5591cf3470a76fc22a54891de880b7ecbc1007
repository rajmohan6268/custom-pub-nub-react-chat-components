{"code":"import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport { usePubNub } from \"pubnub-react\";\r\nimport { useAtom } from \"jotai\";\r\nimport { CurrentChannelTypingIndicatorAtom, ThemeAtom, TypingIndicatorTimeoutAtom, UsersMetaAtom, } from \"../state-atoms\";\r\nimport isEqual from \"lodash.isequal\";\r\nimport \"./typing-indicator.scss\";\r\n/** Subscribes to events generated by MessageInput to display information about users that are\r\n * currently typing messages.\r\n *\r\n * It can be displayed as a text denoting the user's name, or in a form similar to\r\n * a message that can be renderer inside MessageList.\r\n */\r\nexport var TypingIndicator = function (props) {\r\n    var pubnub = usePubNub();\r\n    var theme = useAtom(ThemeAtom)[0];\r\n    var users = useAtom(UsersMetaAtom)[0];\r\n    var typingIndicators = useAtom(CurrentChannelTypingIndicatorAtom)[0];\r\n    var typingIndicatorTimeout = useAtom(TypingIndicatorTimeoutAtom)[0];\r\n    var _a = useState([]), activeUUIDs = _a[0], setActiveUUIDs = _a[1];\r\n    var typingIndicatorsRef = useRef(typingIndicators);\r\n    if (!isEqual(typingIndicatorsRef.current, typingIndicators)) {\r\n        typingIndicatorsRef.current = typingIndicators;\r\n    }\r\n    var calculateActiveUUIDs = useCallback(function () {\r\n        var currentActiveUUIDs = Object.keys(typingIndicators).filter(function (id) { return Date.now() - parseInt(typingIndicators[id]) / 10000 < typingIndicatorTimeout * 1000; });\r\n        var currentActiveUUIDsWoCurrent = currentActiveUUIDs.filter(function (id) { return id !== pubnub.getUUID(); });\r\n        setActiveUUIDs(currentActiveUUIDsWoCurrent);\r\n    }, [typingIndicatorsRef.current]);\r\n    var getIndicationString = function () {\r\n        var indicateStr = \"\";\r\n        if (activeUUIDs.length > 1)\r\n            indicateStr = \"Multiple users are typing...\";\r\n        if (activeUUIDs.length == 1) {\r\n            var user = users.find(function (u) { return u.id === activeUUIDs[0]; });\r\n            indicateStr = \"\".concat((user === null || user === void 0 ? void 0 : user.name) || \"Unknown User\", \" is typing...\");\r\n        }\r\n        return indicateStr;\r\n    };\r\n    useEffect(function () {\r\n        calculateActiveUUIDs();\r\n        var interval = setInterval(calculateActiveUUIDs, 1000);\r\n        return function () { return clearInterval(interval); };\r\n    }, [calculateActiveUUIDs]);\r\n    var renderUserBubble = function (uuid) {\r\n        var user = users.find(function (u) { return u.id === uuid; });\r\n        return (React.createElement(\"div\", { className: \"pn-msg\", key: uuid },\r\n            React.createElement(\"div\", { className: \"pn-msg__avatar\" },\r\n                (user === null || user === void 0 ? void 0 : user.profileUrl) && React.createElement(\"img\", { src: user.profileUrl, alt: \"User avatar\" }),\r\n                !(user === null || user === void 0 ? void 0 : user.profileUrl) && React.createElement(\"div\", { className: \"pn-msg__avatar-placeholder\" })),\r\n            React.createElement(\"div\", { className: \"pn-msg__main\" },\r\n                React.createElement(\"div\", { className: \"pn-msg__title\" },\r\n                    React.createElement(\"span\", { className: \"pn-msg__author\" }, (user === null || user === void 0 ? void 0 : user.name) || \"Unknown User\")),\r\n                React.createElement(\"div\", { className: \"pn-msg__bubble\" },\r\n                    React.createElement(\"span\", { className: \"pn-typing-indicator-dot\" }, \"\\u25CF\"),\r\n                    React.createElement(\"span\", { className: \"pn-typing-indicator-dot\" }, \"\\u25CF\"),\r\n                    React.createElement(\"span\", { className: \"pn-typing-indicator-dot\" }, \"\\u25CF\")))));\r\n    };\r\n    return (React.createElement(React.Fragment, null,\r\n        !props.showAsMessage && !!activeUUIDs.length && (React.createElement(\"div\", { className: \"pn-typing-indicator pn-typing-indicator--\".concat(theme) },\r\n            getIndicationString(),\r\n            \"\\u00A0\")),\r\n        props.showAsMessage && activeUUIDs.map(function (uuid) { return renderUserBubble(uuid); })));\r\n};\r\nTypingIndicator.defaultProps = {\r\n    showAsMessage: false,\r\n};\r\n//# sourceMappingURL=typing-indicator.js.map","references":["/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/@types/react/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/pubnub-react/dist/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/jotai/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/src/state-atoms.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/lodash.isequal/index.js"],"map":"{\"version\":3,\"file\":\"typing-indicator.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/typing-indicator/typing-indicator.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/node_modules/.cache/rollup-plugin-typescript2/placeholder/typing-indicator/typing-indicator.d.ts","writeByteOrderMark":false,"text":"import { FC } from \"react\";\r\nimport \"./typing-indicator.scss\";\r\nexport interface TypingIndicatorProps {\r\n    /** Option to put a typing indicator inside the MessageList component to render indicators as messages. */\r\n    showAsMessage?: boolean;\r\n}\r\n/** Subscribes to events generated by MessageInput to display information about users that are\r\n * currently typing messages.\r\n *\r\n * It can be displayed as a text denoting the user's name, or in a form similar to\r\n * a message that can be renderer inside MessageList.\r\n */\r\nexport declare const TypingIndicator: FC<TypingIndicatorProps>;\r\n"}}
