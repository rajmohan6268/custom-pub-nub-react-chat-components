{"code":"import { atom } from \"jotai\";\r\nexport var ThemeAtom = atom(\"light\");\r\nexport var CurrentChannelAtom = atom(\"\");\r\nexport var SubscribeChannelsAtom = atom([]);\r\nexport var SubscribeChannelGroupsAtom = atom([]);\r\nexport var UsersMetaAtom = atom([]);\r\nexport var MessagesAtom = atom({});\r\nexport var PaginationAtom = atom({});\r\nexport var TypingIndicatorAtom = atom({});\r\nexport var TypingIndicatorTimeoutAtom = atom(10);\r\nexport var RetryFunctionAtom = atom({\r\n    function: function () { return null; },\r\n});\r\nexport var ErrorFunctionAtom = atom({\r\n    function: function () { return null; },\r\n});\r\nexport var CurrentChannelMessagesAtom = atom(function (get) { return (get(MessagesAtom) ? get(MessagesAtom)[get(CurrentChannelAtom)] || [] : []); }, function (get, set, value) {\r\n    var _a;\r\n    return set(MessagesAtom, Object.assign({}, get(MessagesAtom), (_a = {}, _a[get(CurrentChannelAtom)] = value, _a)));\r\n});\r\nexport var CurrentChannelPaginationAtom = atom(function (get) { return get(PaginationAtom)[get(CurrentChannelAtom)] || false; }, function (get, set, value) {\r\n    var _a;\r\n    return set(PaginationAtom, Object.assign({}, get(PaginationAtom), (_a = {}, _a[get(CurrentChannelAtom)] = value, _a)));\r\n});\r\nexport var CurrentChannelTypingIndicatorAtom = atom(function (get) { return get(TypingIndicatorAtom)[get(CurrentChannelAtom)] || {}; }, function (get, set, value) {\r\n    var _a;\r\n    return set(TypingIndicatorAtom, Object.assign({}, get(TypingIndicatorAtom), (_a = {}, _a[get(CurrentChannelAtom)] = value, _a)));\r\n});\r\n//# sourceMappingURL=state-atoms.js.map","references":["/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/node_modules/jotai/index.d.ts","/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/src/types.ts"],"map":"{\"version\":3,\"file\":\"state-atoms.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/state-atoms.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAG7B,MAAM,CAAC,IAAM,SAAS,GAAG,IAAI,CAAc,OAAO,CAAC,CAAC;AACpD,MAAM,CAAC,IAAM,kBAAkB,GAAG,IAAI,CAAS,EAAE,CAAC,CAAC;AACnD,MAAM,CAAC,IAAM,qBAAqB,GAAG,IAAI,CAAW,EAAE,CAAC,CAAC;AACxD,MAAM,CAAC,IAAM,0BAA0B,GAAG,IAAI,CAAW,EAAE,CAAC,CAAC;AAC7D,MAAM,CAAC,IAAM,aAAa,GAAG,IAAI,CAAe,EAAE,CAAC,CAAC;AACpD,MAAM,CAAC,IAAM,YAAY,GAAG,IAAI,CAA2C,EAAE,CAAC,CAAC;AAC/E,MAAM,CAAC,IAAM,cAAc,GAAG,IAAI,CAAiC,EAAE,CAAC,CAAC;AACvE,MAAM,CAAC,IAAM,mBAAmB,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;AAC5C,MAAM,CAAC,IAAM,0BAA0B,GAAG,IAAI,CAAS,EAAE,CAAC,CAAC;AAE3D,MAAM,CAAC,IAAM,iBAAiB,GAAG,IAAI,CAAwD;IAC3F,QAAQ,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;CACrB,CAAC,CAAC;AAEH,MAAM,CAAC,IAAM,iBAAiB,GAAG,IAAI,CAA0C;IAC7E,QAAQ,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;CACrB,CAAC,CAAC;AAEH,MAAM,CAAC,IAAM,0BAA0B,GAAG,IAAI,CAC5C,UAAC,GAAG,IAAK,OAAA,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAA3E,CAA2E,EACpF,UAAC,GAAG,EAAE,GAAG,EAAE,KAAK;;IACd,OAAA,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,YAAY,CAAC,YAAI,GAAC,GAAG,CAAC,kBAAkB,CAAC,IAAG,KAAK,MAAG,CAAC;AAA7F,CAA6F,CAChG,CAAC;AAEF,MAAM,CAAC,IAAM,4BAA4B,GAAG,IAAI,CAC9C,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,KAAK,EAArD,CAAqD,EAC9D,UAAC,GAAG,EAAE,GAAG,EAAE,KAAK;;IACd,OAAA,GAAG,CACD,cAAc,EACd,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,cAAc,CAAC,YAAI,GAAC,GAAG,CAAC,kBAAkB,CAAC,IAAG,KAAK,MAAG,CAC7E;AAHD,CAGC,CACJ,CAAC;AAEF,MAAM,CAAC,IAAM,iCAAiC,GAAG,IAAI,CACnD,UAAC,GAAG,IAAK,OAAA,GAAG,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,EAAvD,CAAuD,EAChE,UAAC,GAAG,EAAE,GAAG,EAAE,KAAK;;IACd,OAAA,GAAG,CACD,mBAAmB,EACnB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,mBAAmB,CAAC,YAAI,GAAC,GAAG,CAAC,kBAAkB,CAAC,IAAG,KAAK,MAAG,CAClF;AAHD,CAGC,CACJ,CAAC\"}","dts":{"name":"/Users/rajmohan/Desktop/edvoy/rnd/react-chat-components/lib/node_modules/.cache/rollup-plugin-typescript2/placeholder/state-atoms.d.ts","writeByteOrderMark":false,"text":"import { UserEntity, MessageEnvelope, Themes } from \"./types\";\r\nexport declare const ThemeAtom: import(\"jotai\").Atom<\"\" | Themes> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: \"\" | Themes | ((prev: \"\" | Themes) => \"\" | Themes)) => void;\r\n    onMount?: <S extends (update?: \"\" | Themes | ((prev: \"\" | Themes) => \"\" | Themes)) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: \"\" | Themes;\r\n};\r\nexport declare const CurrentChannelAtom: import(\"jotai\").Atom<string> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: string | ((prev: string) => string)) => void;\r\n    onMount?: <S extends (update?: string | ((prev: string) => string)) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: string;\r\n};\r\nexport declare const SubscribeChannelsAtom: import(\"jotai\").Atom<string[]> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: string[] | ((prev: string[]) => string[])) => void;\r\n    onMount?: <S extends (update?: string[] | ((prev: string[]) => string[])) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: string[];\r\n};\r\nexport declare const SubscribeChannelGroupsAtom: import(\"jotai\").Atom<string[]> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: string[] | ((prev: string[]) => string[])) => void;\r\n    onMount?: <S extends (update?: string[] | ((prev: string[]) => string[])) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: string[];\r\n};\r\nexport declare const UsersMetaAtom: import(\"jotai\").Atom<UserEntity[]> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: UserEntity[] | ((prev: UserEntity[]) => UserEntity[])) => void;\r\n    onMount?: <S extends (update?: UserEntity[] | ((prev: UserEntity[]) => UserEntity[])) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: UserEntity[];\r\n};\r\nexport declare const MessagesAtom: import(\"jotai\").Atom<{\r\n    [channel: string]: MessageEnvelope[];\r\n}> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: {\r\n        [channel: string]: MessageEnvelope[];\r\n    } | ((prev: {\r\n        [channel: string]: MessageEnvelope[];\r\n    }) => {\r\n        [channel: string]: MessageEnvelope[];\r\n    })) => void;\r\n    onMount?: <S extends (update?: {\r\n        [channel: string]: MessageEnvelope[];\r\n    } | ((prev: {\r\n        [channel: string]: MessageEnvelope[];\r\n    }) => {\r\n        [channel: string]: MessageEnvelope[];\r\n    })) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: {\r\n        [channel: string]: MessageEnvelope[];\r\n    };\r\n};\r\nexport declare const PaginationAtom: import(\"jotai\").Atom<{\r\n    [channel: string]: boolean;\r\n}> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: {\r\n        [channel: string]: boolean;\r\n    } | ((prev: {\r\n        [channel: string]: boolean;\r\n    }) => {\r\n        [channel: string]: boolean;\r\n    })) => void;\r\n    onMount?: <S extends (update?: {\r\n        [channel: string]: boolean;\r\n    } | ((prev: {\r\n        [channel: string]: boolean;\r\n    }) => {\r\n        [channel: string]: boolean;\r\n    })) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: {\r\n        [channel: string]: boolean;\r\n    };\r\n};\r\nexport declare const TypingIndicatorAtom: import(\"jotai\").Atom<{}> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: {} | ((prev: {}) => {})) => void;\r\n    onMount?: <S extends (update?: {} | ((prev: {}) => {})) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: {};\r\n};\r\nexport declare const TypingIndicatorTimeoutAtom: import(\"jotai\").Atom<number> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: number | ((prev: number) => number)) => void;\r\n    onMount?: <S extends (update?: number | ((prev: number) => number)) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: number;\r\n};\r\nexport declare const RetryFunctionAtom: import(\"jotai\").Atom<{\r\n    function: <T>(fn: () => Promise<T>) => Promise<T>;\r\n}> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: {\r\n        function: <T>(fn: () => Promise<T>) => Promise<T>;\r\n    } | ((prev: {\r\n        function: <T>(fn: () => Promise<T>) => Promise<T>;\r\n    }) => {\r\n        function: <T>(fn: () => Promise<T>) => Promise<T>;\r\n    })) => void;\r\n    onMount?: <S extends (update?: {\r\n        function: <T>(fn: () => Promise<T>) => Promise<T>;\r\n    } | ((prev: {\r\n        function: <T>(fn: () => Promise<T>) => Promise<T>;\r\n    }) => {\r\n        function: <T>(fn: () => Promise<T>) => Promise<T>;\r\n    })) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: {\r\n        function: <T>(fn: () => Promise<T>) => Promise<T>;\r\n    };\r\n};\r\nexport declare const ErrorFunctionAtom: import(\"jotai\").Atom<{\r\n    function: (error: Error) => unknown;\r\n}> & {\r\n    write: (get: {\r\n        <Value>(atom: import(\"jotai\").Atom<Value | Promise<Value>>): Value;\r\n        <Value_1>(atom: import(\"jotai\").Atom<Promise<Value_1>>): Value_1;\r\n        <Value_2>(atom: import(\"jotai\").Atom<Value_2>): Value_2 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_2;\r\n    } & {\r\n        <Value_3>(atom: import(\"jotai\").Atom<Value_3 | Promise<Value_3>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_3 | Promise<Value_3>;\r\n        <Value_4>(atom: import(\"jotai\").Atom<Promise<Value_4>>, options: {\r\n            unstable_promise: true;\r\n        }): Value_4 | Promise<Value_4>;\r\n        <Value_5>(atom: import(\"jotai\").Atom<Value_5>, options: {\r\n            unstable_promise: true;\r\n        }): (Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5) | Promise<Value_5 extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? V extends Promise<infer V> ? any : V : V : V : V : V : V : V : V : V : V : Value_5>;\r\n    }, set: {\r\n        <Value_6, Result extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_6, undefined, Result>): Result;\r\n        <Value_7, Update, Result_1 extends void | Promise<void>>(atom: import(\"jotai\").WritableAtom<Value_7, Update, Result_1>, update: Update): Result_1;\r\n    }, update: {\r\n        function: (error: Error) => unknown;\r\n    } | ((prev: {\r\n        function: (error: Error) => unknown;\r\n    }) => {\r\n        function: (error: Error) => unknown;\r\n    })) => void;\r\n    onMount?: <S extends (update?: {\r\n        function: (error: Error) => unknown;\r\n    } | ((prev: {\r\n        function: (error: Error) => unknown;\r\n    }) => {\r\n        function: (error: Error) => unknown;\r\n    })) => void>(setAtom: S) => void | (() => void);\r\n} & {\r\n    init: {\r\n        function: (error: Error) => unknown;\r\n    };\r\n};\r\nexport declare const CurrentChannelMessagesAtom: import(\"jotai\").WritableAtom<MessageEnvelope[], unknown, void>;\r\nexport declare const CurrentChannelPaginationAtom: import(\"jotai\").WritableAtom<boolean, unknown, void>;\r\nexport declare const CurrentChannelTypingIndicatorAtom: import(\"jotai\").WritableAtom<any, unknown, void>;\r\n"}}
